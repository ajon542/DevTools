
namespace ProtoBufGenerator
{
    using System;
    using Microsoft.VisualStudio.Shell;

    /// <summary>
    /// Attribute for VSPackage registration. Allows new registration information without
    /// changing the registration tools.
    /// </summary>
    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
    public sealed class ProvideGeneratorAttribute : RegistrationAttribute
    {
        /// <summary>
        /// The type name of the tool being registered.
        /// </summary>
        private string name;

        /// <summary>
        /// The type of the generator object.
        /// </summary>
        public Type GeneratorType { get; private set; }

        /// <summary>
        /// The tool guid.
        /// </summary>
        public Guid LanguageServiceGuid { get; private set; }

        /// <summary>
        /// The description of the generator tool.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Indicates that the generator will generate a binary or PE image at design
        /// time for the source. For exampe, in a C# project, when you edit a file called
        /// Resource1.resx in the resource editor, then save it under obj\tempPE, a dll
        /// called Resource1.Designer.dll is generated. You don't have to build the project,
        /// the single file generator does this for you.
        /// </summary>
        public bool GeneratesDesignTimeSource { get; set; }

        /// <summary>
        /// Indicates that the source generated by the generator should be included in the
        /// final output of the entire project compilation. For example, the .settings file
        /// uses this to build the generated source into the project output.
        /// </summary>
        public bool GeneratesSharedDesignTimeSource { get; set; }

        /// <summary>
        /// Gets or sets the name of the generator tool.
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }

            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("value");
                }
                if (string.IsNullOrEmpty(value))
                {
                    throw new ArgumentException("value cannot be empty");
                }

                name = value;
            }
        }

        /// <summary>
        /// Registry key for the generator tool.
        /// </summary>
        private string RegistrationKey
        {
            get
            {
                return string.Format(@"Generators\{0}\{1}", LanguageServiceGuid.ToString("B"), Name);
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvideGeneratorAttribute"/> class.
        /// </summary>
        /// <param name="generatorType">The type of the generator.</param>
        /// <param name="languageServiceGuid">The guid, commonly "VSConstants.UICONTEXT.CSharpProject_string"</param>
        public ProvideGeneratorAttribute(Type generatorType, string languageServiceGuid)
        {
            if (generatorType == null)
            {
                throw new ArgumentNullException("generatorType");
            }
            if (languageServiceGuid == null)
            {
                throw new ArgumentNullException("languageServiceGuid");
            }
            if (string.IsNullOrEmpty(languageServiceGuid))
            {
                throw new ArgumentException("languageServiceGuid cannot be empty");
            }

            GeneratorType = generatorType;
            LanguageServiceGuid = new Guid(languageServiceGuid);
            Name = GeneratorType.Name;
        }

        #region RegistrationAttribute Members

        /// <summary>
        /// Register the object using the given registration context.
        /// </summary>
        /// <param name="context">Context information for the registration attribute.</param>
        public override void Register(RegistrationContext context)
        {
            using (Key key = context.CreateKey(RegistrationKey))
            {
                if (!string.IsNullOrEmpty(Description))
                {
                    key.SetValue(string.Empty, Description);
                }
                key.SetValue("CLSID", GeneratorType.GUID.ToString("B"));
                key.SetValue("GeneratesDesignTimeSource", GeneratesDesignTimeSource ? 1 : 0);
                key.SetValue("GeneratesSharedDesignTimeSource", GeneratesSharedDesignTimeSource ? 1 : 0);
            }
        }

        /// <summary>
        /// Unregister the object using the given registration context.
        /// </summary>
        /// <param name="context">Context information for the registration attribute.</param>
        public override void Unregister(RegistrationContext context)
        {
            context.RemoveKey(RegistrationKey);
        }

        #endregion
    }
}
